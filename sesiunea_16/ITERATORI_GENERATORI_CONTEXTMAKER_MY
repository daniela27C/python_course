## ğŸ“Œ Iteratori

Iterable vs Iterators

- Un interabil este un obiect prin care putem itera (cu for si while loops)
- ex: lista, dict, tuplu, string etc
- Cum ne dam seama daca un obiect este iterabil sau nu/
Cum ne dam seama daca putem folosi cicluri repetitive pe un obiect?
- Trebuie ca obiectul respectiv sa aiba disponibila metoda
\_\_iter__()

- \_\_iter__() ne returneaza un iterator
- Loop-urile (for, while) apeleaza aceasta metoda \_\_iter__()
in spate, se returneaza un ITERATOR, si astfel putem sa accesam elementele
pe rand.
- Functia iter() (care la randul ei apeleaza metoda \_\_iter__())
returneaza un iterator de la acestea.
Apelarea funcÈ›iei iter():
IN PLUS
Atunci cÃ¢nd apelÄƒm funcÈ›ia iter() È™i Ã®i transmitem un obiect iterabil
(cum ar fi o listÄƒ, un È™ir de caractere, un dicÈ›ionar etc.), aceasta apeleazÄƒ
metoda specialÄƒ __iter__() a obiectului respectiv.
Metoda __iter__():
Metoda specialÄƒ __iter__() este definitÄƒ Ã®n obiectele iterabile È™i este folositÄƒ
pentru a crea È™i Ã®ntoarce un iterator asociat cu obiectul respectiv.

my_list = [1, 2, 3, 4, 5]
# ObÈ›inem un iterator din lista 'my_list' folosind funcÈ›ia 'iter()'
my_iterator = iter(my_list)
# IterÄƒm prin elementele listei folosind iteratorul
for element in my_iterator:
    print(element)


- Iteratorii sunt peste tot in Python.
- ITERATORUL in Python este pur È™i simplu un obiect care poate fi iterat astfel incat
va returna date, cate un element pe rand.
- Tehnic vorbind, un obiect iterator Python trebuie sa implementeze
doua metode speciale, \_\_iter__() È™i \_\_next__(),
numite colectiv protocol iterator.
- Un iterator tine minte state-ul iteratiei si stie care este elementul
urmator din iteratie.
- Daca o iteratie a ajuns la final, se arunca exceptia StopIteration.

- Folosim functia next() pentru a itera manual
toate elementele unui iterator.
Cand ajungem la sfarsit si nu mai exista date de returnat, va ridica exceptia
StopIteration


## ğŸ“Œ Generatori
- Exista multa munca Ã®n construirea unui iterator Ã®n Python.
- Trebuie sa implementam o clasa cu metoda \_\_iter__()
si \_\_next__(), sa tinem evidenta starilor interne
si sa ridicam StopIteration atunci cand nu exista
valori de returnat.
- Acest lucru este atat lung, cat si contraintuitiv.
- Generatorul vine in ajutor in astfel de situatii.
- Generatoarele Python sunt o modalitate simpla de a crea
iteratoare.
- Toate lucrurile mentionate mai sus sunt gestionate automat
de generatori Ã®n Python.
- Pur si simplu vorbind, un generator este o functie
care returneaza un obiect (iterator) pe care il putem itera
(o valoare la un moment dat).
- Este destul de simplu sa creezi un generator in Python.
- Este la fel de usor ca definirea unei functii normale,
dar cu o instructiune yield in loc de o instructiune return.
- Daca o functie contine cel putin o instructiune yield
(poate conÈ›ine alte instructiuni yield sau return),
ea devine o functie generatoare.
- Atat yield, cat si return-ul vor returna o valoare
dintr-o functie.
- Diferenta este ca, in timp ce o instructiune return
incheie o functie in intregime,
instructiunea yield opreste functia salvand toate starile sale
si mai tarziu continua de acolo la apeluri succesive.

- utili pentru crearea easy-to-read iterators
- arata ca functiile normale, dar in loc sa returnam
valori cu "return", ne folosim de yield.
- yield va returna o valoare si va tine minte state-ul pana
unde a ramas pana cand generatorul este invocat din nou.
- Generatorii sunt tot iteratori, dar metodele \_\_iter__ si
\_\_next__ sunt create in mod automat pentru noi

## ğŸ“Œ Context Managers

- Context Managers = obiecte care ne ajuta sa controlam accesul la
anumite resurse
- Una din marile provocari in programare este manipularea
resurselor externe (interactiunea cu fisiere, baza de date,
link-uri externe).
- Atunci cand interactionam cu resurse externe trebuie sa avem
in vedere o manipulare corecta a fazei de setup si teardown a resurselor.

- Cel mai intalnit mod de iteractiune cu context managers, este
utilizarea blocului with.


### Definirea unui context manager
- Minimul necesar pentru a avea un context manager intr-o clasa
este ca aceasta sa aiba definite metodele \_\_enter\_\_ si \_\_exit\_\_
- Doar prin definirea celor doua metode o sa putem sa ne folosim
de instante ale clasei respective in with statements.

## ğŸ“Œ Decoratori

- Decoratorii sunt niste tool-uri foarte puternice in Python
pentru ca permit programatorilor sa modifice comportamentul
initial al unei functii sau al unei clase.
- Decoratorii ne permit sa cream un wrapper peste o alta functie
pentru a-i extinde comportamentul, fara ai schimba implementarea
originala.
